<?xml version="1.1" encoding="UTF-8" standalone="no"?>
<!--
Copyright (c) 2022 Surati

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to read
the Software only. Permissions is hereby NOT GRANTED to use, copy, modify,
merge, publish, distribute, sublicense, and/or sell copies of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
-->
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.6.xsd">
  <changeSet author="baudoliver7" id="001">
    <sql>
      CREATE TABLE ad_profile (
        id NUMBER(18) CONSTRAINT ad_profile_pk PRIMARY KEY,
        name VARCHAR2(225) NOT NULL
      );

      CREATE SEQUENCE ad_profile_id_seq;

      CREATE TRIGGER ad_profile_id_tri
        BEFORE INSERT ON ad_profile
        FOR EACH ROW
        BEGIN
        SELECT ad_profile_id_seq.nextval
        INTO :new.id
        FROM dual;
      END;

      INSERT INTO ad_profile (name) VALUES ('Administrateur');
      INSERT INTO ad_profile (name) VALUES ('DG');
      INSERT INTO ad_profile (name) VALUES ('DAF');
      INSERT INTO ad_profile (name) VALUES ('Trésorière');
      INSERT INTO ad_profile (name) VALUES ('Comptable');

      CREATE TABLE ad_access_profile (
        access_id VARCHAR2(100) NOT NULL,
        profile_id NUMBER(18) NOT NULL,
        CONSTRAINT ad_access_profile_pk PRIMARY KEY (access_id, profile_id),
        CONSTRAINT ad_access_profile_profile_id_fkey FOREIGN KEY (profile_id) REFERENCES ad_profile (id)
          ON UPDATE CASCADE ON DELETE CASCADE
      );

      INSERT INTO ad_access_profile (access_id, profile_id) VALUES ('VISUALISER_ORDRES_PAIEMENT', 3);
      INSERT INTO ad_access_profile (access_id, profile_id) VALUES ('VISUALISER_PAIEMENTS', 3);
      INSERT INTO ad_access_profile (access_id, profile_id) VALUES ('VISUALISER_ORDRES_PAIEMENT', 4);
      INSERT INTO ad_access_profile (access_id, profile_id) VALUES ('VISUALISER_PAIEMENTS', 4);
      INSERT INTO ad_access_profile (access_id, profile_id) VALUES ('VISUALISER_ORDRES_PAIEMENT', 5);
      INSERT INTO ad_access_profile (access_id, profile_id) VALUES ('VISUALISER_PAIEMENTS', 5);

      CREATE TABLE ad_person (
        id NUMBER(18) CONSTRAINT ad_person_pk PRIMARY KEY,
        name VARCHAR2(100) NOT NULL
      );

      CREATE SEQUENCE ad_person_id_seq;

      CREATE TRIGGER ad_person_id_tri
        BEFORE INSERT ON ad_person
        FOR EACH ROW
        BEGIN
        SELECT ad_person_id_seq.nextval
        INTO :new.id
        FROM dual;
      END;

      INSERT INTO ad_person (name) VALUES ('Administrateur');

      CREATE TABLE ad_user (
        id NUMBER(18) CONSTRAINT ad_user_pk PRIMARY KEY,
        login VARCHAR2(25) UNIQUE NOT NULL,
        password VARCHAR2(100) NOT NULL,
        salt VARCHAR2(30) NOT NULL,
        blocked boolean DEFAULT false NOT NULL,
        profile_id NUMBER(18) NOT NULL,
        CONSTRAINT ad_user_id_fkey FOREIGN KEY (id) REFERENCES ad_person (id)
          ON UPDATE CASCADE ON DELETE CASCADE,
        CONSTRAINT ad_user_profile_id_fkey FOREIGN KEY (profile_id) REFERENCES ad_profile (id)
          ON UPDATE CASCADE ON DELETE CASCADE
      );

      INSERT INTO ad_user (id, login, password, salt, blocked, profile_id) VALUES (1, 'admin', 'bgJf2vB2udmDA3yZ/8Sb14AUJ9YhLXevdTTL31DIncQ=', 'PErZHEn0O6IOwUXh8IWRVC40aSol6S', false, 1);

      CREATE TABLE ad_event_log (
        id NUMBER(18) CONSTRAINT ad_event_log_pk PRIMARY KEY,
        date DATE NOT NULL,
        message VARCHAR2(255) NOT NULL,
        details VARCHAR2(255),
        level_id VARCHAR2(15) NOT NULL,
        author VARCHAR2(25) NOT NULL,
        ip_address VARCHAR2(15) NOT NULL
      );

      CREATE SEQUENCE ad_event_log_id_seq;

      CREATE TRIGGER ad_event_log_id_tri
      BEFORE INSERT ON ad_event_log
      FOR EACH ROW
      BEGIN
      SELECT ad_event_log_id_seq.nextval
      INTO :new.id
      FROM dual;
      END;
    </sql>
  </changeSet>
</databaseChangeLog>
