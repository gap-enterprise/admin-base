/*
 * This file is generated by jOOQ.
 */
package io.surati.gap.admin.jooq.generated.tables;


import io.surati.gap.admin.jooq.generated.Keys;
import io.surati.gap.admin.jooq.generated.Public;
import io.surati.gap.admin.jooq.generated.tables.records.AdProfileRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AdProfile extends TableImpl<AdProfileRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.ad_profile</code>
     */
    public static final AdProfile AD_PROFILE = new AdProfile();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdProfileRecord> getRecordType() {
        return AdProfileRecord.class;
    }

    /**
     * The column <code>public.ad_profile.id</code>.
     */
    public final TableField<AdProfileRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.ad_profile.name</code>.
     */
    public final TableField<AdProfileRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(225).nullable(false), this, "");

    private AdProfile(Name alias, Table<AdProfileRecord> aliased) {
        this(alias, aliased, null);
    }

    private AdProfile(Name alias, Table<AdProfileRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.ad_profile</code> table reference
     */
    public AdProfile(String alias) {
        this(DSL.name(alias), AD_PROFILE);
    }

    /**
     * Create an aliased <code>public.ad_profile</code> table reference
     */
    public AdProfile(Name alias) {
        this(alias, AD_PROFILE);
    }

    /**
     * Create a <code>public.ad_profile</code> table reference
     */
    public AdProfile() {
        this(DSL.name("ad_profile"), null);
    }

    public <O extends Record> AdProfile(Table<O> child, ForeignKey<O, AdProfileRecord> key) {
        super(child, key, AD_PROFILE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<AdProfileRecord, Long> getIdentity() {
        return (Identity<AdProfileRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AdProfileRecord> getPrimaryKey() {
        return Keys.AD_PROFILE_PKEY;
    }

    @Override
    public List<UniqueKey<AdProfileRecord>> getKeys() {
        return Arrays.<UniqueKey<AdProfileRecord>>asList(Keys.AD_PROFILE_PKEY);
    }

    @Override
    public AdProfile as(String alias) {
        return new AdProfile(DSL.name(alias), this);
    }

    @Override
    public AdProfile as(Name alias) {
        return new AdProfile(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AdProfile rename(String name) {
        return new AdProfile(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AdProfile rename(Name name) {
        return new AdProfile(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
