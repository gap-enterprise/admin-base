/*
 * This file is generated by jOOQ.
 */
package io.surati.gap.admin.base.jooq.generated.tables;


import io.surati.gap.admin.base.jooq.generated.Keys;
import io.surati.gap.admin.base.jooq.generated.Public;
import io.surati.gap.admin.base.jooq.generated.tables.records.AdUserRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AdUser extends TableImpl<AdUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.ad_user</code>
     */
    public static final AdUser AD_USER = new AdUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdUserRecord> getRecordType() {
        return AdUserRecord.class;
    }

    /**
     * The column <code>public.ad_user.id</code>.
     */
    public final TableField<AdUserRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.ad_user.login</code>.
     */
    public final TableField<AdUserRecord, String> LOGIN = createField(DSL.name("login"), SQLDataType.VARCHAR(25).nullable(false), this, "");

    /**
     * The column <code>public.ad_user.password</code>.
     */
    public final TableField<AdUserRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.ad_user.salt</code>.
     */
    public final TableField<AdUserRecord, String> SALT = createField(DSL.name("salt"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>public.ad_user.blocked</code>.
     */
    public final TableField<AdUserRecord, Boolean> BLOCKED = createField(DSL.name("blocked"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("FALSE", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.ad_user.profile_id</code>.
     */
    public final TableField<AdUserRecord, Long> PROFILE_ID = createField(DSL.name("profile_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private AdUser(Name alias, Table<AdUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private AdUser(Name alias, Table<AdUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.ad_user</code> table reference
     */
    public AdUser(String alias) {
        this(DSL.name(alias), AD_USER);
    }

    /**
     * Create an aliased <code>public.ad_user</code> table reference
     */
    public AdUser(Name alias) {
        this(alias, AD_USER);
    }

    /**
     * Create a <code>public.ad_user</code> table reference
     */
    public AdUser() {
        this(DSL.name("ad_user"), null);
    }

    public <O extends Record> AdUser(Table<O> child, ForeignKey<O, AdUserRecord> key) {
        super(child, key, AD_USER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<AdUserRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_B;
    }

    @Override
    public List<UniqueKey<AdUserRecord>> getKeys() {
        return Arrays.<UniqueKey<AdUserRecord>>asList(Keys.CONSTRAINT_B, Keys.CONSTRAINT_BB);
    }

    @Override
    public List<ForeignKey<AdUserRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AdUserRecord, ?>>asList(Keys.AD_USER_ID_FKEY, Keys.AD_USER_PROFILE_ID_FKEY);
    }

    private transient AdPerson _adPerson;
    private transient AdProfile _adProfile;

    public AdPerson adPerson() {
        if (_adPerson == null)
            _adPerson = new AdPerson(this, Keys.AD_USER_ID_FKEY);

        return _adPerson;
    }

    public AdProfile adProfile() {
        if (_adProfile == null)
            _adProfile = new AdProfile(this, Keys.AD_USER_PROFILE_ID_FKEY);

        return _adProfile;
    }

    @Override
    public AdUser as(String alias) {
        return new AdUser(DSL.name(alias), this);
    }

    @Override
    public AdUser as(Name alias) {
        return new AdUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AdUser rename(String name) {
        return new AdUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AdUser rename(Name name) {
        return new AdUser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, String, String, Boolean, Long> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
